What is CI/CD
  - Continuous Integration
    - Code changes trigger an automated build
    - build runs automated tests
  - Continuous Delivery/Deployment
    - Continuous Delivery
      - continuous delivery is a deployment practice where merged changes are automatically built, tested, and prepared for release into staging and eventually production environments
      - there is usually a manual decision process to initiate deployment of the new code
    - Continuous Deployment
      - automatically deploys the new code following successful testing, eliminating any manual steps
      - the new code is automatically released as soon as it passes the stages of your release process (build, test, package)
      - continuous deployment also automates the release process
  - CodeCommit is the code repository
  - CodeBuild is the build management system
  - CodeDeploy is the deployment system
  - CodePipeline coordinates the CI/CD pipeline
  - Continuous Integration is about integrating or merging code changes frequently
  - Continuous Delivery is about automating the build, test, deploy functions (usually requires human intervention)
  - Continuous Deployment fully automates the entire release process
CodeCommit 101
  - fully managed source control service that enables companies to host secure and highly scalable private git repositories
  - centralized repository for all your code, binaries, images, and libraries
  - tracks and manages code changes
  - maintains version history
  - manages updates from multiple sources
  - enables collaboration
  - users create a branch of the master repository which they can update independently
  - saved changes which are ready to be applied to the repository are known as commits
  - when the branch code is ready to be added to the master repository, the branch is merged into the master
  - provides all the capabilities of git
  - data is encrypted in transit and at rest
    - connect to CodeCommit via https or ssh
CodeDeploy 101
  - automated deployment service which allows you to deploy your application code automatically to EC2 instances, on-premise systems, and lambda functions
  - ensures that all deployments are consistent because it removes all manual steps
  - automatically scales with your infrastructure and integrates with various CI-CD tools (Jenkins, GitHub, Atlassian, AWS CodePipeline) as well as config management tools like Ansible, Puppet, and Chef
  - two deployment approaches available:
    - In-place
      - the application is stopped on each instance and the latest revision is installed
      - the instance is out of service during this time and your capacity will be reduced
      - if the instances are behind a load balancer, you can configure the load balancer to stop sending requests to the instances which are being upgraded
      - in-place is also known as a rolling update
      - can only be used for EC2 and on-premise systems, it is not supported for lambda
      - if you need to rollback your changes, the previous version of the application will need to be redeployed
    - Blue-green
      - new instances are provisioned and the latest revision is installed on the new instances
      - blue represents the active deployment, green is the new release
      - the new instances are registered with the elastic load balancer, traffic is then routed to the new instances and the original instances are eventually terminated
      - advantage: the new instances can be created ahead of time and the code released to production by simply switching all traffic to the new servers
      - switching back to the original environment is faster and more reliable and is just a case of routing the traffic back to the original servers
      - no reduction in performance or capacity during the deployment
  - code deploy terminology
    - deployment group
      - a set of EC2 instances or lambda functions to which a new revision of the software is to be deployed
    - deployment
      - the process and components used to apply a new revision
    - deployment configuration
      - a set of deployment rules as well as success-failure conditions used during deployment
    - AppSpec file
      - defines the deployment actions you want AWS CodeDeploy to execute
    - revision
      - everything needed to deploy the new version (AppSpec file, application files, executables, config files)
    - application
      - unique identifier for the application you want to deploy to ensure the correct combination of revision, deployment configuration, and deployment group are referenced during deployment
  - uses a CodeDeploy agent on EC2 instances
CodePipeline 101
  - a fully managed continuous integration and continuous delivery service
  - can orchestrate the build, test, and even deployment of your application every time there is a change to your code, based on a user defined software release process
  - allows you to model your release process as a workflow or pipeline made up of different tasks
  - you define what happens and where for each of the different stages of the workflow, and this can be modeled using the CodePipeline GUI or CLI
  - integrates with CodeCommit, CodeBuild, CodeDeploy, lambda, Elastic Beanstalk, CloudFormation, ECS, as well as third party tools such as GitHub and Jenkins
  - every code change pushed to your code repository automatically enters the workflow and triggers the set of actions defined for each stage of the pipeline
  - the pipeline automatically stops if one of the stages fails, such as a unit test failure, and the change is rolled back
Advanced CodeDeploy and the AppSpec File
  - AppSepc file is used to define parameters that will be used for a CodeDeploy deployment
  - file structure depends on whether you are deploying to lambda or EC2-On Premise
  - for lambda deployments, the AppSpec file may be written in YAMML or JSON
    - contains the following fields
      - version
        - reserver for future use, currently the only allowed value is 0.0
      - resources
        - the name and properties of the lambda function to deploy
      - hooks
        - specifies lambda functions to run at set points in the deployment lifecycle to validate the deployment such as validation tests to run before allowing traffic to be sent to your newly deployed lambda instances
          - two hooks available when using AppSpec with lambda
            - BeforeAllowTraffic
              - used to specify the tasks or functions you want to run before traffic is routed to the newly deployed lambda function such as test to validate that the function has been deployed correctly
            - AfterAllowTraffic
              - used to specify the tasks or functions you want to run after the traffic has been routed to the newly deployed lambda function such as test to validate that the function is accepting traffic correctly and is behaving as expected
  - for EC2 and On-premise deployments
    - must be written in YAML
    - contains the following fields
      - version
        - reserved for future use, currently the only allowed value is 0.0
      - os
        - the operating system version you are using
      - files
        - the location of any application files that need to be copied and where they should be copied (source and destination folders)
      - hooks
        - lifecycle event hooks allow you to specify scripts that need to be run at set points in the deployment lifecycle such as unzip application files prior to deployment, run functional tests on the newly deployed application, de-register and re-register instances with a load balancer
          - run order of hooks when using AppSpec with EC2 and On-premise
            - 1 first these
              - BeforeBlockTraffic
                - run tasks on instances before they are deregistered from a load balancer
              - BlockTraffic
                - deregister instances from a load balancer
              - AfterBlockTraffic
                - run tasks on instances after they are deregistered from a load balancer
            - 2 then these
              - ApplicationStop
                - gracefully stop the application in preparation for deploying the new version
              - DownloadBundle
                - the CodeDeploy agent copies the application version files to a temporary location
              - BeforeInstall
                - details of any pre-installation scripts, such as backing up the current version, or decrypting files
              - Install
                - the CodeDeploy agent copies the application revision files from their temporary location to their correct location
              - AfterInstall
                - details of any post-installation scripts, such as configuration tasks, change file permissions
              - ApplicationStart
                - restarts any services that were stopped during ApplicationStop
              - ValidateService
                 - details of any tests to validate the service
            - 3 last these
              - BeforeAllowTraffic
                - run tasks on instances before they are registered with a load balancer
              - AllowTraffic
                - register instances with a load balancer
              - AfterAllowTraffic
                - run tasks on instances after they are registered with a load balancer
    - the appspec.yml file must be placed in the root directory of your revision (the directory containing your application source code) otherwise the deployment will fail
Docker and CodeBuild
  - ECS is a fully managed clustered platform which allows you to run your own Docker images in the cloud
  - Docker commands to build, tag (apply an alias), and push your Docker image to the ECR repository
    - docker build -t myimagerepo
    - docker tag myimagerepo:latest 725654345.dkr.ecr.region-name.amazonaws.com/myimagerepo:latest
    - docker push 725654345.dkr.ecr.region-name.amazonaws.com/myimagerepo:latest
  - use buildspec.yml to define the build commands and settings used by CodeBuild to run your build
  - you can override the settings in the buildspec.yml by adding your own commands in the console when you launch the build
  - if your build fails, check the build logs in the CodeBuild console and you can also view the full CodeBuild log in CloudWatch
CloudFormation
  - a service that allows you to manage, configure and provision your AWS infrastructure as code
  - resources are defined using a CloudFormation template
  - CloudFormation interprets the template and makes the appropriate API calls to create the resources you have defined
  - support YAML and JSON
  - infrastructure is provisioned consistently, with fewer mistakes
  - less time and effort than configuring manually
  - can version control and peer review templates
  - free to use (charged for what you create)
  - can be used to manage updates and dependencies
  - can be used to roll back and delete the entire stack
  - YAML or JSON template used to describe the end-state of the infrastructure you are provisioning or changing
  - after creating the template, you upload it to CloudFormation using S3
  - CloudFormation reads the template and makes the API calls on your behalf
  - the resulting resources are called a stack
  - Resources is the only mandatory section of the CloudFormation template
  - the Transform section is used to reference additional code stored in S3, allowing for code reuse such as a lambda function or template snippets
  - the main sections of a CloudFormation template:
    - Parameters
      - input custom values into the stack
    - Conditions
      - provision resources based on environment
    - Resources
      - mandatory, the AWS resources to create
    - Mappings
      - create custom mappings like Region to AMI
    - Transforms
      - reference code located in S3, such as lambda functions, or reusable snippets of CloudFormation code
Serverless Application Model (SAM)
  - an extension to CloudFormation used to define serverless applications
  - simplified syntax for defining serverless resources, APIs, lambda functions, DynamoDB tables
  - use the SAM CLI to package your deployment code, upload it to S3 and deploy your serverless application
  - SAM CLI commands used to package and deploy
    - sam package
      - packages your application and uploads to S3
    - sam deploy
      - deploys your serverless application using CloudFormation
  - the Transform:AWS::Serverless-2016-10-31 line of the template tells CloudFormation that the template will create a SAM template
CloudFormation Nested Stacks
  - allow reuse of CloudFormation code for common use cases
    - standard configuration for
      - load balancer
      - web server
      - application server
  - create a standard template for each common use case, store them in S3, and reference from within your CloudFormation template using the Stack resource type
Developer Theory Summary
  - read the white paper:
    - https://d0.awsstatic.com/whitepapers/DevOps/practicing-continuous-integration-continuous-delivery-on-AWS.pdf
Dev Theory Quiz
  "question": "You are deploying an application to a number of EC2 instances using CodeDeploy. What is the name of the file used to specify source files and lifecycle hooks?",
      "answers": [
        "appspec.yml",
        "appspec.json",
        "buildspec.json",
        "buildspec.yml"
      ],
      "correctAnswer": ["appspec.yml"]

  "question": "You want to receive an email whenever a user pushes code to your CodeCommit repository, how can you configure this?",
        "answers": [
          "Configure Notifications in the console, this will create a CloudWatch Events rule to send a notification to an SNS topic which will trigger an email to be sent to the user",
          "Configure a CloudWatch Events rule to send a message to SQS which will trigger an email to be sent whenever a user pushes code to the repository",
          "Configure a CloudWatch Events rule to send a message to SES which will trigger an email to be sent whenever a user pushes code to the repository",
          "Create a new SNS topic and configure it to poll for CodeCommit events. Ask all your users subscribe to the topic to recieve notifications"
        ],
        "correctAnswer": ["Configure Notifications in the console, this will create a CloudWatch Events rule to send a notification to an SNS topic which will trigger an email to be sent to the user"]

  "question": "Which AWS service can be used to fully automate your entire release process?",
      "answers": [
        "CodeCommit",
        "CodePipeline",
        "CodeDeploy",
        "CodeBuild"
      ],
      "correctAnswer": ["CodePipeline"]

  "question": "Part of your CloudFormation deployment fails due to a misconfiguration, by default what will happen?",
      "answers": [
        "CloudFormation will rollback the entire stack",
        "CloudFormation will ask you if you want to continue with the deployment",
        "CloudFormation will rollback only the failed components",
        "Failed components will remain available for debugging purposes"
      ],
      "correctAnswer": ["CloudFormation will rollback the entire stack"]

  "question": "You have some code located in an S3 bucket for a lambda function that you want to reference in your CloudFormation template. Which section of the template can you use to define this?",
      "answers": [
        "Transforms",
        "Resources",
        "Files",
        "Inputs"
      ],
      "correctAnswer": ["Transforms"]

  "question": "How can you prevent CloudFormation from deleting your entire stack on failure? (Choose 2)",
      "answers": [
        "Use the --enable-termination-protection flag with the AWS CLI",
        "Use the --disable-rollback flag with the AWS CLI",
        "Set Termination Protection to Enabled in the CloudFormation console",
        "Set the Rollback on failure radio button to No in the CloudFormation console"
      ],
      "correctAnswer": ["Set the Rollback on failure radio button to No in the CloudFormation console",
        "Use the --disable-rollback flag with the AWS CLI"]

    "question": "You are using CloudFormation to create a new S3 bucket, which of the following sections would you use to define the properties of your bucket?",
        "answers": [
          "Outputs",
          "Conditions",
          "Resources",
          "Parameters"
        ],
        "correctAnswer": ["Resources"]

    "question": "Which two things can you define using the Transforms section of the CloudFormation template for a lambda function? (Choose 2)",
       "answers": [
         "To transform API responses to a supported format",
         "To re-use code located in S3",
         "To specify the use of the Serverless Application Model for Lambda deployments",
         "To convert between YAML and JSON format templates"
       ],
       "correctAnswer": ["To re-use code located in S3",
         "To specify the use of the Serverless Application Model for Lambda deployments"]

     "question": "Which AWS service can be used to compile source code, run tests and package code?",
       "answers": [
         "CodeDeploy",
         "CodeBuild",
         "CodePipeline",
         "CodeCommit"
       ],
       "correctAnswer": ["CodeBuild"]

   "question": "Your company has moved to AWS so it can use scripted infrastructure. You would like to apply version control to your infrastructure, so that you can roll back infrastructure to a previous stable version if needed. You would also like to quickly deploy testing and staging environments in multiple regions. What services should you use to achieve this?",
     "answers": [
       "Elastic BeanStalk, plus a version control system such as GitHub.",
       "CloudFormation, plus a version control system such as GitHub.",
       "Opsworks, plus a version control system such as GitHub.",
       "CloudWatch, plus a version control system such as GitHub."
     ],
     "correctAnswer": ["CloudFormation, plus a version control system such as GitHub."]

   "question": "Which of the following approaches allows you to reuse pieces of CloudFormation code in multiple templates, for common use cases like provisioning a load balancer or web server?",
       "answers": [
         "copy and paste the code into the template each time you need to use it",
         "Share the code using an EBS volume",
         "Store the code you want to reuse in an AMI and reference the AMI from within your CloudFormation template",
         "Use a CloudFormation nested stack"
       ],
       "correctAnswer": ["Use a CloudFormation nested stack"]

   "question": "Which of the following practices allows multiple developers working on the same application to merge code changes frequently, without impacting each other and enables the identification of bugs early on in the release process?",
     "answers": [
       "Continuous Integration",
       "Continuous Delivery",
       "Continuous Development",
       "Continuous Deployment"
     ],
     "correctAnswer": ["Continuous Integration"]

   "question": "Which AWS service can be used automatically install your application code onto EC2, on premises systems and Lambda?",
       "answers": [
         "CodeBuild",
         "CodeDeploy",
         "X-Ray",
         "CodeCommit"
       ],
       "correctAnswer": ["CodeDeploy"]

   "question": "When deploying application code to EC2, the AppSpec file can be written in which language?",
     "answers": [
       "XML",
       "YAML",
       "JSON",
       "JSON or YAML"
     ],
     "correctAnswer": ["YAML"]

   "question": "You are deploying a number of EC2 and RDS instances using CloudFormation. Which section of the CloudFormation template would you use to define these?",
       "answers": [
         "Outputs",
         "Resources",
         "Instances",
         "Transforms"
       ],
       "correctAnswer": ["Resources"]

   "question": "Which AWS service can be used to centrally store and version control your application source code, binaries and libraries?",
      "answers": [
        "CodePipeline",
        "ElasticFileSystem",
        "CodeCommit",
        "CodeBuild"
      ],
      "correctAnswer": ["CodeCommit"]

  "question": "In the CodeDeploy AppSpec file, what are hooks used for?",
      "answers": [
        "Hooks are reserved for future use",
        "To specify files that you want to copy during the deployment",
        "To specify code, scripts or functions that you want to run at set points in the deployment lifecycle",
        "To reference AWS resources that will be used during the deployment"
      ],
      "correctAnswer": ["To specify code, scripts or functions that you want to run at set points in the deployment lifecycle"]

  "question": "You want to use the output of your CloudFormation stack as input to another CloudFormation stack. Which section of the CloudFormation template would you use to help you configure this?",
      "answers": [
        "Exports",
        "Transforms",
        "Resources",
        "Outputs"
      ],
      "correctAnswer": ["Outputs"]

  "question": "When deploying application code to Lambda, the AppSpec file can be written in which languages? (Choose 2)",
      "answers": [
        "Python",
        "YAML",
        "JSON",
        "XML"
      ],
      "correctAnswer": ["YAML",
      "JSON"]

Web Identity Federation
  - lets you give your users access to AWS resources after they have successfully authenticated with a web-based identity provider like Amazon, Facebook, or Google
  - following successful authentication, the user receives an authentication token from the Web ID provider, which they can trade for temporary AWS security credentials
  - Cognito provides web identity federation with these features:
    - sign-up and sign-in to your apps
    - access for guest users
    - acts as an identity broker between your app web ID providers, so you do not need to write any additional code
    - synchronizes user data for multiple devices
    - recommended for all mobile applications which run on AWS services
  - Cognito is the recommended approach for web identity federation using social media accounts like Facebook
  - Cognito brokers between your app and Facebook or Google to provide temporary credentials which map to an IAM role allowing access to the required resources
  - no need for your app to embed or store AWS credentials locally on the device and it gives a seamless experience across all mobile devices
Cognito User Pools
  - user pools are user directories used to manage user sign-up and sign-in functionality for mobile and web applications
  - users can sign-in directly to the user pool, or indirectly via an identity provider like Facebook, Amazon, or Google
  - Cognito acts as an identity broker between the ID provider and AWS
  - successful authentication generates a number of JSON web tokens (JWTs)
  - identity pools enable you to create unique identities for your users and authenticate them with identity providers
  - with an identity, you can obtain temporary, limited-privilege AWS credentials to access other AWS services
  - Cognito tracks the association between user identity and the various different devices they sign-in from
  - in order to provide a seamless user experience for your application, Cognito uses push synchronization to push updates and synchronize user data across multiple devices
  - SNS is used to send a silent push notification to all the devices associated with a given user identity whenever data stored in the cloud changes
Inline Policies versus Managed Policies versus Custom Policies
  - IAM is used to define user access permissions within AWS
  - three different types of IAM policies
    - Managed Policies
      - a managed policy is an IAM policy which is created and administered by AWS
      - AWS provides managed policies for common use cases based on job function
        - AmazonDynamoDBFullAccess
        - AWSCodeCommitPowerUser
        - AmazonEC2ReadOnlyAccess
      - these AWS provided policies allow you to assign appropriate permissions to your users groups, and roles without having to write the policy yourself
      - a single managed policy can be attached to multiple users, groups, or roles within the same AWS account and across different accounts
      - you cannot change the permissions defined in an AWS managed policy
    - Customer Managed Policies
      - a stand alone policy that you create and administer inside your own AWS account
      - you can attach this policy to multiple users, groups, and roles, but only within your account
      - in order to create a customer managed policy, you can copy and existing AWS managed policy and customize it to fit the requirements of your organization
      - recommended for use cases where the existing AWS manged policies do not meet the needs of your environment
    - Inline Policies
      - an IAM policy which is actually embedded within the user, group, or role to which it applies
      - there is a strict 1-to-1 relationship between the entity and the policy
      - when you delete the user, group, or role in which the inline policy is embedded, the policy will also be deleted
      - in most cases AWS recommends using managed policies over inline policies
      - inline policies are useful when you want to be sure that the permissions in a policy are not inadvertently assigned to any other user, group, or role than the one for which they are intended
STS AssumeRoleWithWebIdentity
  - assume-role-with-web-identity is an API provided by STS (Security Token Service)
  - returns temporary security credentials for users authenticated by a mobile or web application using a Web ID provider like Amazon, Facebook, Google, etc.
  - allows access to AWS resources
  - for mobile applications, Cognito is recommended (Cognito makes the assume-role-with-web-identity API call on your behalf)
  - regular web applications can use the STS assume-role-with-web-identity API
  - returns a session token, an access key, and secret access key which expire in 1 hour by default
  - once the user has been authenticated, the application makes the assume-role-with-web-identity API call
  - returns an AssumedRoleUser ARN and an AssumedRoleID, which are used to programmatically reference the temporary credentials, not an IAM role or user
Cross-Account Access
  - allows you to work productively within a multi-account (such as dev, test, prod) (or multi-role) by making it easy for you to switch roles
  - can manage multiple accounts with your one IAM user

Advanced IAM Quiz

"question": "When using Web Identity Federation to allow a user to access an AWS service (such as an S3 bucket), which of the following is the correct order of steps?",
    "answers": [
      "A user logs in to the AWS platform using their facebook credentials. AWS authenticate with facebook to check the credentials. Temporary Security Access is granted to AWS.",
      "A user authenticates with facebook first. They are then given an ID token by facebook, which they can then trade for temporary security credentials.",
      "A user makes the AssumeRoleWithWebIdentity API Call. The user is then redirected to facebook to authenticate. Once authenticated, the user is given an ID token. The user is then granted temporary access to the AWS platform.",
      "Users cannot use Facebook credentials to access the AWS platform."
    ],
    "correctAnswer": ["A user authenticates with facebook first. They are then given an ID token by facebook, which they can then trade for temporary security credentials."]

"question": "Which of the following features of IAM allows you to have your users Authenticate using Facebook, Google or Amazon?",
      "answers": [
        "Web Identity Federation",
        "Multi-Factor Authentication",
        "AWS Single Sign-On (SSO)",
        "The IAM HTTPS API"
      ],
      "correctAnswer": ["Web Identity Federation"]

"question": "Which of the following API calls can be used to enable a user authenticated by Facebook to access your web application hosted in AWS?",
      "answers": [
        "STS assume-role",
        "STS assume-role-with-web-identity",
        "STS assume-role-with-saml",
        "STS get-federation-token"
      ],
      "correctAnswer": ["STS assume-role-with-web-identity"]

"question": "How can you allow a user from one AWS account to access and manage resources in another AWS account?",
      "answers": [
        "Configure cross origin resource sharing",
        "Configure Cognito",
        "Configure cross account access",
        "Configure web identity federation"
      ],
      "correctAnswer": ["Configure cross account access"]

"question": "What does Cognito use to manage sign-up and sign-in functionality for mobile and web applications?",
      "answers": [
        "IAM Users",
        "Identity Pools",
        "IAM Groups",
        "User Pools"
      ],
      "correctAnswer": ["User Pools"]

"question": "Which of the following applies to an AWS Managed Policy? (Choose 3)",
      "answers": [
        "AWS occasionally updates the permissions defined in an AWS managed policy",
        "It is available for use by any AWS account",
        "It can be assigned to multiple users, groups or roles",
        "It can only be assigned to a single user, group or role in your account",
        "You can change the default permissions defined in the policy"
      ],
      "correctAnswer": ["AWS occasionally updates the permissions defined in an AWS managed policy",
        "It is available for use by any AWS account",
        "It can be assigned to multiple users, groups or roles"]

"question": "Which statement best describes IAM?",
      "answers": [
        "IAM allows you to manage permissions for AWS resources only.",
        "IAM stands for Improvised Application Management, and it allows you to deploy and manage applications in the AWS Cloud.",
        "IAM allows you to manage users' passwords only. AWS staff must create new users for your organization. This is done by raising a ticket.",
        "IAM allows you to manage users, groups, and roles and their corresponding level of access to the AWS Platform."
      ],
      "correctAnswer": ["IAM allows you to manage users, groups, and roles and their corresponding level of access to the AWS Platform."]

"question": "What is the name of the service that allows users to use their social media account to gain temporary access to the AWS platform?",
      "answers": [
        "Facebook Sign In Service",
        "Web Confederation Services",
        "Active Directory Authentication Services",
        "Web Identity Federation"
      ],
      "correctAnswer": ["Web Identity Federation"]

"question": "What does Cognito use to create unique identities for users and authenticate them with Web ID providers?",
      "answers": [
        "Identity Pools",
        "User Pools",
        "IAM Groups",
        "IAM Users"
      ],
      "correctAnswer": ["Identity Pools"]

"question": "You are developing a new mobile application to share photos, which AWS technology can you use to ensure your users have a seamless experience across all their devices?",
      "answers": [
        "Multi-Factor Authentication",
        "IAM",
        "Cognito",
        "Web Identity Federation"
      ],
      "correctAnswer": ["Cognito"]

"question": "Which of the following correctly describes an Inline Policy? (Choose 2)",
      "answers": [
        "The policy will be deleted if you delete the user, group or role it is associated with",
        "You cannot change the permissions defined in the policy",
        "It can be attached to multiple users and groups within your AWS account",
        "It is embedded in a user, group or role"
      ],
      "correctAnswer": ["The policy will be deleted if you delete the user, group or role it is associated with",
        "It is embedded in a user, group or role"]

"question": "Which of the following are provided by AWS to allow you to easily assign IAM permissions to your users based on pre-defined common use cases?",
      "answers": [
        "Custom Policy",
        "Inline Policy",
        "Managed Policy",
        "Common Policy"
      ],
      "correctAnswer": ["Managed Policy"]

"question": "Amazon Cognito is recommended for which use case?",
      "answers": [
        "Anonymous access to AWS resources",
        "Web Identity Federation for mobile applications",
        "Secure storage of database connection strings",
        "Identity Federation with Active Directory"
      ],
      "correctAnswer": ["Web Identity Federation for mobile applications"]

"question": "You are working on a mobile phone app for an online retailer which stores customer data in DynamoDB. You would like to allow new users to sign-up using their Facebook credentials. What is the recommended approach?",
      "answers": [
        "After the user has successfully logged in to Facebook and received an authentication token, Cognito should be used to exchange the token for temporary access to DynamoDB",
        "Write your own custom code which allows the user to log in via Facebook and receive an authentication token, then calls the AssumeRoleWithWebIdentity API and exchanges the authentication tokens for temporary access to DynamoDB",
        "Embed encrypted AWS credentials into the application code, so that the application can access DynamoDB on the users behalf.",
        "After the user has authenticated with Facebook, allow them to download encrypted AWS credentials to their device so that the mobile app can access DynamoDB"
      ],
      "correctAnswer": ["After the user has successfully logged in to Facebook and received an authentication token, Cognito should be used to exchange the token for temporary access to DynamoDB"]

"question": "Which of the following services can be used to securely store confidential information like credentials and license codes so that they can be accessed by EC2 instances?",
      "answers": [
        "IAM",
        "Systems Manager Parameter Store",
        "DynamoDB",
        "KMS"
      ],
      "correctAnswer": ["Systems Manager Parameter Store"]

"question": "When would you use an Inline Policy over a Managed Policy?",
      "answers": [
        "To add IAM permissions that can be applied to multiple AWS accounts that you own",
        "When you want to manage the policy yourself",
        "To add permissions that are only ever intended to be used for a single user in your account",
        "To add IAM permissions for common use cases like giving your DBAs full access to DynamoDB"
      ],
      "correctAnswer": ["To add permissions that are only ever intended to be used for a single user in your account"]

"question": "Amazon Cognito provides Web Identity Federation with which of the following features? (Choose 2)",
      "answers": [
        "Single sign-on for Active Directory users",
        "Sign-up and sign-in to your applications",
        "Synchronization of user data across multiple device types",
        "Multi-Factor Authentication"
      ],
      "correctAnswer": ["Sign-up and sign-in to your applications",
        "Synchronization of user data across multiple device types"]

"question": "Which of the following correctly describes a Customer Managed Policy? (Choose 2)",
      "answers": [
        "It is managed by you",
        "The policy will be deleted if you delete the user, group or role it is associated with",
        "It is created and administered by AWS",
        "It can be assigned to multiple users, groups or roles in your account"
      ],
      "correctAnswer": ["It is managed by you",
        "It can be assigned to multiple users, groups or roles in your account"]

Introduction to CloudWatch (START HERE)
  - 
