S3 101
  - S3 provides developers and IT teams with secure, durable, highly-scalable object storage
  - S3 has a simple web service interface to store and retrieve any amount of data from anywhere on the web
  - S3 is not for operating systems or Databases
  - S3 is a safe place to store your files
  - S3 is object storage based, not block storage based
  - With S3, your data is spread across multiple devices and facilities
  - S3 is object based - i.e. allows you to upload files
  - S3 files can be from 0 Bytes to 5 TB
  - S3 has unlimited storage
  - With S3, files are stored in buckets, which are similar to folders
  - S3 has a universal name space, that is, bucket names must be unique globally; similar to a DNS address
  - When you upload a file into S3 you will receive an HTTP 200 code if the upload was successful
  - S3 Data Consistency: two modes
    - Read after Write consistency for PUTS of new objects
    - Eventual consistency for overwrite PUTS and DELETES (can take some time to propagate)
  - S3 is a simple key-value store
    - S3 is object based; objects consist of the following:
      - a Key, which is simply the name of the object
      - a Value, which is simply the data, which is made up of a series of bytes
      - a Version ID, which is important for versioning
      - Metadata, which is data about the data you are storing
      - Subresources, which are bucket-specific configuration:
        - Bucket policies
        - Access Control Lists
        - Cross Origin Resource Sharing (CORS); files located in one bucket to access files located in another bucket
        - Transfer Acceleration, which is a service which allows you to accelerate file transfers when upload many files into S3
  - S3 is built for 99.99% availability
  - Amazon guarantees 99.9% availability
  - Amazon guarantees 99.999999999% durability for S3 information (11 9s)
  - S3 has tiered storage available
  - S3 has lifecycle management
  - S3 has versioning
  - S3 has encryption
  - You can secure access to your data using:
    - Access Control Lists
    - Bucket Policies
  - S3 Storage Tiers
    - Regular S3
      - 99.99% availability, 99.999999999% durability, stored redundantly across multiple devices in multiple facilities;
        designed to sustain a loss of 2 facilities concurrently
    - S3 IA (Infrequently Accessed)
      - For data that is accessed less frequently, but requires rapid access when needed
      - Lower fee than S3, but you are charged a retrieval fee every time you retrieve the data
    - One-Zone IA
      - Same as IA however data is stored in a single AZ only
      - Still 99.999999999% durability
      - Only 99.5% availability
      - Costs 20% less than regular IA
    - Reduced Redundancy Storage
      - Designed to provide 99.99% durability and 99.99% availability of objects over a given year
      - Used for data that can be recreated if lost, e.g. thumbnails
    - Glacier
      - Very inexpensive, but used for archival only
      - Optimized for data that is infrequently accessed
      - It takes 3 to 5 hours to restore data from Glacier
    - S3 Intelligent Tiering
      - Suitable for data which has unknown or unpredictable access patterns
      - 2 Tiers
        - frequent access
        - infrequent access
      - Automatically moves your data to the most cost-effective tier based on how frequently you access each object within a bucket
      - If an object is not accessed for 30 consecutive days, it gets automatically moved to the infrequent access tier
      - As soon as an object in the infrequent access tier is accessed, it is moved to the frequent access tier
      - 99.99999999999% durability
      - 99.9% availability over a given year
      - Helps optimize cost
      - No fees for accessing your data but a small monthly fee for monitoring/automation $0.0025 per 1,000 objects
 - S3 Charges
   - Storage per GB
   - Requests (Get, Put, Copy, etc.)
   - Storage Management pricing
     - Inventory, Analytics, and Object Tags
   - Data management pricing
     - Data transferred out of S3
     - Free to transfer in to S3
   - Transfer Acceleration
     - Use of CloudFront to optimize transfers
 - Exam Tips
   - Example S3 bucket url: https://s3-eu-west-1.amazonaws.com/bucketname
S3 Security
 - By default, all newly created buckets are private
 - You can setup access control to your buckets using:
   - Bucket Policies: applied at the bucket level
   - Access Control Lists: applied at the object level
 - S3 buckets can be configured to create access logs, which log all requests made to the S3 bucket. These logs can be written to another bucket
 - Bucket policies are written in JSON
 - All versions of a versioned S3 bucket are kept in the same bucket
 - S3 object-level logging records any api level activity using AWS CloudTrail, at an additional cost
 - S3 has two different types of encryption:
   - AES-256: uses server-side encryption with AWS S3-Managed Keys (SSE-S3)
   - AWS-KMS: uses server-side encryption with AWS KMS-Managed Keys (SSE-KMS)
 - You can enable S3 CloudWatch request metrics, which monitor requests in your bucket for an additional cost
   - gives performance metrics for S3
 - S3 has public access settings
   - Used to enforce that buckets do not allow public access to data.
   - You can also configure S3 to block public access at the account level.
 - You can grant public read-access to objects in the Access Control List
 - You can encrypt at rest at the bucket level using bucket policies or the object level using access control lists
 - If the bucket policy does not allow public access, you cannot upload an object into the bucket and make that object publicly accessible using the Access Control List
S3 Encryption
 - In transit
   - SSL/TLS (Transport Layer Security, will replace SSL)
     - generally means using https to transmit data
 - At Rest
   - Server-side encryption - 3 types
     - S3 managed keys - SSE-S3
       - AWS manages the keys for you, rotate keys on a defined frequency
       - uses AES-256 bit encryption
     - AWS Key Management Service, managed keys - SSE-KMS
       - AWS manages the keys for you
       - uses an envelope key that encrypts your encryption key
       - gives an audit trail which records the use of your encryption key
       - can use your own key, or the default AWS key
     - Server-side encryption with customer provided keys - SSE-C
       - AWS manages the encryption and decryption but you manage your own keys
 - Client-side encryption
   - you encrypt the files yourself before you upload to S3
 - Enforcement of S3 Encryption
   - Every time a file is uploaded to S3, a PUT request is initiated
   - If the file is to be encrypted at upload time, the x-amz-server-side-encryption parameter will be included in the request header
     - two options are currently available
       - x-amz-server-side-encryption: AES256 (SSE-S3 - S3 managed keys)
       - x-amz-server-side-encryption: ams:kms (SSE-KMS - KMS managed keys)
     - when this parameter is included in the header of the PUT request, it tells S3 to encrypt the object at the time of upload, using the specified encryption method
     - you can enforce the use of server-side encryption by using a bucket policy which denies any S3 PUT request which does not include the x-amz-server-side-encryption
       parameter in the request header
CORS for S3 (START HERE)
 - 
