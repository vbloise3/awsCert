EC2 Lab
  - EC2 instances are created from Amazon Machine Images (AMIs)
  - Detailed CloudWatch monitoring monitors every minute, versus every 5 minutes for default monitoring
  - Use the EC2 User Data section under Advanced Details to create a bootstrap script
  - The EC2 Security Group is a virtual firewall controlling traffic in and out to your EC2 instance
  - You need a public key and private key pair to launch an EC2 instance
  - The public key to an EC2 instance is like the lock and the private key is the key to the lock
Elastic Load Balancers
  - Three types of load balancers
     - Application Load Balancer: operates at OSI layer 7
     - Network Load Balancer: operates at OSI layer 4; used for very fast performance routing; most expensive ELB
     - Classic Load Balancer: legacy, no longer recommended
  - Application load balancers
     - best suited for http and https traffic
     - operate at layer 7 and are application aware
  - Network load balancers
     - best suited for tcp traffic where extreme performance is required
     - operate at the connection level (layer 4)
     - capable of handling millions of requests per second
     - maintains ultra-low latency
  - Classic load balancers
     - can load balance http/https applications
     - use layer 7-specific features such as sticky sessions, but not as intelligent as application load balancer on layer 7
     - can also function as strict layer 4 for applications that rely purely on tcp traffic
     - if your application is having issues, the classic load balancer will respond with a 504 (gateway timeout) meaning the application is not responding within the idle timeout period
       - remediate by scaling up or out
  - X-Forwarded-For header
     - used to get the user requesting ip address (the IPv4 address) that is behind the ELB
Route 53
  - Route 53 is AWS's DNS service
  - Route 53 allows you to map your domain names to
     - EC2 Instances
     - Load Balancers
     - S3 Buckets
     - CloudFront Distributions
     - Elastic Beanstalk environments
  - An Alias in Route 53 tells Route 53 where to route a request to the domain name associated with the Alias
  - Record Set types
     - A - IPv4 address
     - CNAME - Canonical name
     - MX - Mail Exchange
     - AAAA - IPv6 address
     - TXT - text
     - PTR - pointer
     - SRV - Service locator
     - SPF - Sender Policy Framework
     - NAPTR - Name Authority Pointer
     - CAA - Certification Authority Authorization
     - SOA - Start of Authority
  - The Zone Apex Record, or naked domain name, is the domain without any prefix, such as vincebloise.com versus www.vincebloise.com
  - When selecting an A Record, you can choose an Alias, which in Route 53 is an alias for an AWS resource
  - An Alias in Route 53 is created at the Zone Apex, or naked domain name level
  - An Alias in Route 53 is only supported by A and AAAA record set types
AWS CLI
  - Least Privilege - Always give your users the minimum amount of access required
  - Create Groups - Assign your users to groups. Your users will automatically inherit the permissions of the group. The group's
    permissions are assigned using policy documents.
  - Secret Access Key - You will this key only once. If you do not save it, you can delete the Key Pair (Access Key and Secret Access Key)
    and regenerate it. Once you generate a new key pair you will need to run aws configure again.
  - Do not use just one access key - Do not create just one access key and share it with all of your developers.
    Create one key pair per developer.
  - You can use the CLI on you PC - You can install the cli on your MAC, Linux, or Windows PC.

EC2 with Roles
  - Roles allow you to not have to use Access Key IDs and Secret Access keys
  - Roles are preferred from a security perspective
  - Roles are controlled by policies
  - You can change a policy on a role and it will immediate affect on the EC2 instance
  - You can attach and detach roles to running EC2 instances without having to stop or terminate the instance
  - When you get a question asking which to choose: Access Keys or Roles, always choose Roles
EC2 with Attached Encrypted EBS Volume
  - EBS volumes created from encrypted snapshots are automatically encrypted
  - EBS volumes created from unencrypted snapshots are automatically unencrypted
  - EBS volumes have to be in the same availability zone as the EC2 instance to which they are attached
  - Unmount an EBS volume before creating a snapshot of it
  Two ways to encrypt an EBS root volume
  - To encrypt an unencrypted EBS volume, take a snapshot of the volume, then copy the snapshot and encrypt the copy.
    Then create an image (AMI) from the encrypted snapshot.
  - You can also encrypt a root EBS volume using the operating system level encryption through commands or tools like BitLocker in Windows
  - You can encrypt additional attached EBS volumes using the console, the CLI, or API
RDS 101 (START HERE)
  - RDS is OLTP
  - The relational database types in RDS:
    - SQL Server
    - Oracle
    - MySQL Server
    - PostgreSQL
    - Aurora
    - MariaDB
  - Non Relational Databases
    - Databases that contains collections (lie a table), documents (like a row), and key value pairs (like fields)
    - Don't have to predefine the table structure
  - Data Warehouses
    - Used for business intelligence
    - Data scientists use tools like Cognos, Jaspersoft, SQL Server Reporting Services, Oracle Hyperion, SAP NetWeaver to interrogate data warehouses
    - Used to pull in very large and complex datasets
    - Used by management to do queries on data (such as current performance vs targets, etc.)
    - Production data extracted into the data warehouse
  - OLTP vs OLAP
    - Online Transaction Processing (OLTP) differs from Online Analytics Processing (OLAP) in terms of the types of queries you will run against them.
    - OLTP: get OrderNumber 12345, pulls up one row: the transaction
    - OLAP: get Net Profit for EMEA and Pacific for the blah product, pulls large numbers of records
    - OLAP - RedShift
  - ElastiCache
    - A web service that makes it easy to deploy, operate, and scale an in-memory cache in the cloud
    - Supports two open-source in-memory caching engines
      - Memcached
      - Redis
  - MySQL default port 3306
  - If connection from web server running on EC2 instance fails to connect to MySQL server instance (Unable to Connect to MySQL error):
      - Open up port 3306 in the security group which the MySQL instance is in to the security group which your EC2 instance is in
RDS Multi-AZ and Read Replicas (START HERE)
  - There are two types of backups for AWS:
    1) Automated backups
    2) Database snapshots
  - Automated backups allow you to recover your database to any point in time within a "retention period."
    - the retention period can be between 1 and 35 days
    - automated backups will take a full daily snapshot and will also store transaction logs throughout the day
    - when you do a recovery, AWS will first choose the most recent daily backup, and then apply transaction logs relevant to that day
      - this allows you to do a point in time recovery down to the second, within the retention period
    - automated backups are enabled by default
    - the backup data is stored in S3 and you get free storage space equal to the size of your database
    - backups are taken within a defined window
    - during the backup window, storage I/) may be suspended while you data is being backed up and you may experience elevated latency
    - if you delete your RDS instance, your automated backups will also be deleted
    - you can define a backup window of when to start the backup and the duration of the backup
  - DB Snapshots are done manually (ie. they are user initiated.)
    - DB Snapshots are stored even after you delete your original RDS instance, unlike automated backups
  - Restoring backups
    - Whenever you restore either an Automated Backup or a manual Snapshot, the restored version of the database will be a new RDS instance with a new DNS endpoint
  - Encryption
    - Encryption at rest is supported by MySQL, Oracle, SQL Server, PostgreSQL, MariaDB, and Aurora
    - Encryption is done using the AWS key management service (KMS)
    - Once your RDS instance is encrypted, the data stored at rest in the underlying storage is encrypted, as are its automated backups, read replicas, and snapshots
    - At the present time encrypting an existing database is not supported
    - To use RDS encryption for an existing database, you must first create a snapshot, make a copy of that snapshot and encrypt the copy
  - Multi-AZ
    - Changes to the master DB instance are synchronously replicated to the secondary DB instance
    - Multi-AZ is used for disaster recovery only
    - When dealing with RDS you never use ip addresses, you use the DNS endpoint names of your RDS instances
    - When AWS fails over to the secondary RDS instance, it automatically changes the db hostname to the secondary instance's DNS endpoint name in you database configuration
    - Multi-AZ allows you to have an exact copy of your production database in another AZ.
    - AWS handles the replication for you, so when your production database is written to, this write will automatically be synchronized to the standby database
    - In the event of planned database maintenance, DB instance failure, or an AZ failure, RDS will automatically failover to the standby so that database operations ca resume quickly without administrative intervention
    - Multi-AZ is used for disaster recovery, not for improving performance; for performance improvement, use Read Replicas
    - Aurora by default is spread across multiple AZs
  - Read Replicas
    - When you do writes to the master RDS instance, these writes are pushed out to the read replica copies of the database
    - Can have up to 5 read replicas per production database
    - Read replicas allow you to scale out, sending many of the reads to the read replicas
    - You can have read replicas of read replicas, these will have some replication latency
    - You can have a read replica in a different AZ, or even in a different region
    - Read replicas allow you to have a read-only copy of your production database
    - Read replicas are achieved by using Asynchronous replication from the primary RDS instance to the read replica.
    - Use read replicas for very read-heavy database workloads
    - Read replica database types available now: MySQL Server, PostgreSQL, MariaDB, Aurora
    - Read replicas are used for scaling, not for DR
    - Must have automatic backups turned on in order to deploy a read replica
    - You can have up to 5 read replica copies of any database
    - You can have read replicas of read replicas, but watch out for latency
    - Each read replica will have its own DNS end point
    - You can have read replicas that have Multi-AZ enabled
    - You can create read replicas of Multi-AZ source databases
    - Read replicas can be promoted to be their own databases. This breaks the replication
    - You can have a read replica in another region
    - You can enable encryption on your read replicas even if your primary DB instance is not encrypted
Elasticache 101
 -
